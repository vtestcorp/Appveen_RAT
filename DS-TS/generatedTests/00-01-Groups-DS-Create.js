const log4js = require('log4js'); const request = require('request-promise'); const faker = require('faker');const fs = require('fs'); const path = require('path');if (!fs.existsSync('data')) fs.mkdirSync('data'); function getDateTime() {var sd = new Date();var syear = sd.getFullYear();var smonth = ('0' + (sd.getMonth() + 1)).slice(-2);var sdate = ('0' + sd.getDate()).slice(-2);var shours = ('0' + sd.getHours()).slice(-2);var sminutes = ('0' + sd.getMinutes()).slice(-2);var sseconds = ('0' + sd.getSeconds()).slice(-2);var startDate = syear + '-' + smonth + '-' + sdate;var startTime = shours + '-' + sminutes + '-' + sseconds;return startDate + '_' + startTime;}; function waitForInAPI(_option, _key, _value, _till){if(_till > (new Date())){return request(_option).then(_d => {if (JSON.parse(_d)[_key] == _value) return true;else {return new Promise(_resolve => {setTimeout(()=> _resolve(waitForInAPI(_option, _key, _value, _till)),500);});}}, _e => {return false});} else return false;}; function checkInList(_list, _values) {let flag = false;_list.forEach(_e => {let innerFlag = true;for (_k in _values) {innerFlag = innerFlag && (_e[_k] == _values[_k]);};if (innerFlag) flag = true;});return flag;}; log4js.configure({ appenders: { file: { type: 'file', filename: 'Log_'+getDateTime()+'_00-01-Groups-DS-Create.json.log' } }, categories: { default: { appenders: ['file'], level: 'info' } }});const logger = log4js.getLogger('[00-01-Groups-DS-Create.json]');const dataFile = path.join('.', 'data', "00-01-Groups-DS-Create.json");logger.info('dataFile :: ' + dataFile);let dataPipe = {init: (_dataFile) => fs.writeFileSync(dataFile, '{}'),save: (_key, _data) => {data = JSON.parse(fs.readFileSync(dataFile).toString());data[_key] = _data;fs.writeFileSync(dataFile, JSON.stringify(data));},read: _dataFile => {let f = path.join('.', 'data', _dataFile);logger.info('Reading data from ' + f);return JSON.parse(fs.readFileSync(f).toString());}};dataPipe.init();var expect = require('chai').expect;var assert = require('chai').assert;var url1 = process.env.URL1 ? process.env.URL1 : 'https://bifrost.ds.appveen.com/api';describe('00::Groups for data service users', function () {var loginResponse='';var ds_all_blocked='';var ds_basic_view='';var ds_basic_manage='';var ds_deployment_manage='';var ds_start_stop_manage='';var ds_design_view='';var ds_design_manage='';var ds_integration_view='';var ds_integration_manage='';var ds_experience_view='';var ds_experience_manage='';var ds_role_view='';var ds_role_manage='';var ds_settings_view='';var ds_settings_manage='';var ds_audit_view='';it('Login', function (done) {logger.info('Title: Login');var _payload = {"username":"test_appadmin@appveen.com","password":"123123123"};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/login");logger.info("Request HEADERS :: " + JSON.stringify({}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/login","headers": {},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);loginResponse = res.body;dataPipe.save("loginResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["token"], 'res.body["token"]').to.exist;logger.info('Login :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Login :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS All Blocked', function (done) {logger.info('Title: Create Group: DS All Blocked');var _payload = {"name":"DS All Blocked","app":"TEST-API","users":["test_ds_all_blocked@appveen.com"]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_all_blocked = res.body;dataPipe.save("ds_all_blocked",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS All Blocked');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS All Blocked :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS All Blocked :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Basic View', function (done) {logger.info('Title: Create Group: DS Basic View');var _payload = {"name":"DS Basic View","app":"TEST-API","users":["test_ds_basic_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_basic_view = res.body;dataPipe.save("ds_basic_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Basic View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Basic View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Basic View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Basic Manage', function (done) {logger.info('Title: Create Group: DS Basic Manage');var _payload = {"name":"DS Basic Manage","app":"TEST-API","users":["test_ds_basic_manage@appveen.com"],"roles":[{"id":"PMDSBC","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSBU","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSBD","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_basic_manage = res.body;dataPipe.save("ds_basic_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Basic Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Basic Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Basic Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Deployment Manage', function (done) {logger.info('Title: Create Group: DS Deployment Manage');var _payload = {"name":"DS Deployment Manage","app":"TEST-API","users":["test_ds_deployment_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSPD","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_deployment_manage = res.body;dataPipe.save("ds_deployment_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Deployment Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Deployment Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Deployment Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Start Stop Manage', function (done) {logger.info('Title: Create Group: DS Start Stop Manage');var _payload = {"name":"DS Start Stop Manage","app":"TEST-API","users":["test_ds_start_stop_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSPS","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_start_stop_manage = res.body;dataPipe.save("ds_start_stop_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Start Stop Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Start Stop Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Start Stop Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Design View', function (done) {logger.info('Title: Create Group: DS Design View');var _payload = {"name":"DS Design View","app":"TEST-API","users":["test_ds_design_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSD","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_design_view = res.body;dataPipe.save("ds_design_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Design View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Design View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Design View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Design Manage', function (done) {logger.info('Title: Create Group: DS Design Manage');var _payload = {"name":"DS Design Manage","app":"TEST-API","users":["test_ds_design_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSD","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_design_manage = res.body;dataPipe.save("ds_design_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Design Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Design Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Design Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Integration View', function (done) {logger.info('Title: Create Group: DS Integration View');var _payload = {"name":"DS Integration View","app":"TEST-API","users":["test_ds_integration_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIDPR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIDPO","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIRSU","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIRAP","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIRRJ","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIRDI","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSIRRW","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_integration_view = res.body;dataPipe.save("ds_integration_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Integration View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Integration View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Integration View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Integration Manage', function (done) {logger.info('Title: Create Group: DS Integration Manage');var _payload = {"name":"DS Integration Manage","app":"TEST-API","users":["test_ds_integration_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIDPR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIDPO","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIRSU","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIRAP","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIRRJ","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIRDI","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSIRRW","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_integration_manage = res.body;dataPipe.save("ds_integration_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Integration Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Integration Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Integration Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Experience View', function (done) {logger.info('Title: Create Group: DS Experience View');var _payload = {"name":"DS Experience View","app":"TEST-API","users":["test_ds_experience_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSE","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_experience_view = res.body;dataPipe.save("ds_experience_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Experience View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Experience View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Experience View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Experience Manage', function (done) {logger.info('Title: Create Group: DS Experience Manage');var _payload = {"name":"DS Experience Manage","app":"TEST-API","users":["test_ds_experience_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSE","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_experience_manage = res.body;dataPipe.save("ds_experience_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Experience Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Experience Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Experience Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Role View', function (done) {logger.info('Title: Create Group: DS Role View');var _payload = {"name":"DS Role View","app":"TEST-API","users":["test_ds_role_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSR","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_role_view = res.body;dataPipe.save("ds_role_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Role View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Role View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Role View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Role Manage', function (done) {logger.info('Title: Create Group: DS Role Manage');var _payload = {"name":"DS Role Manage","app":"TEST-API","users":["test_ds_role_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSR","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_role_manage = res.body;dataPipe.save("ds_role_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Role Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Role Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Role Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Settings View', function (done) {logger.info('Title: Create Group: DS Settings View');var _payload = {"name":"DS Settings View","app":"TEST-API","users":["test_ds_settings_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSDH","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSPD","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSEP","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSFS","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSPR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSSRE","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_settings_view = res.body;dataPipe.save("ds_settings_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Settings View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Settings View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Settings View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Settings Manage', function (done) {logger.info('Title: Create Group: DS Settings Manage');var _payload = {"name":"DS Settings Manage","app":"TEST-API","users":["test_ds_settings_manage@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSDH","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSPD","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSEP","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSFS","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSPR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PMDSSRE","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_settings_manage = res.body;dataPipe.save("ds_settings_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Settings Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Settings Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Settings Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: DS Audit View', function (done) {logger.info('Title: Create Group: DS Audit View');var _payload = {"name":"DS Audit View","app":"TEST-API","users":["test_ds_audit_view@appveen.com"],"roles":[{"id":"PVDSB","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSAAP","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSASR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSAPO","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSASR","app":"TEST-API","entity":"SM","type":"author"},{"id":"PVDSAPR","app":"TEST-API","entity":"SM","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);ds_audit_view = res.body;dataPipe.save("ds_audit_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Audit View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: DS Audit View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: DS Audit View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});});