const log4js = require('log4js'); const request = require('request-promise'); const faker = require('faker');const fs = require('fs'); const path = require('path');if (!fs.existsSync('data')) fs.mkdirSync('data'); function getDateTime() {var sd = new Date();var syear = sd.getFullYear();var smonth = ('0' + (sd.getMonth() + 1)).slice(-2);var sdate = ('0' + sd.getDate()).slice(-2);var shours = ('0' + sd.getHours()).slice(-2);var sminutes = ('0' + sd.getMinutes()).slice(-2);var sseconds = ('0' + sd.getSeconds()).slice(-2);var startDate = syear + '-' + smonth + '-' + sdate;var startTime = shours + '-' + sminutes + '-' + sseconds;return startDate + '_' + startTime;}; function waitForInAPI(_option, _key, _value, _till){if(_till > (new Date())){return request(_option).then(_d => {if (JSON.parse(_d)[_key] == _value) return true;else {return new Promise(_resolve => {setTimeout(()=> _resolve(waitForInAPI(_option, _key, _value, _till)),500);});}}, _e => {return false});} else return false;}; function checkInList(_list, _values) {let flag = false;_list.forEach(_e => {let innerFlag = true;for (_k in _values) {innerFlag = innerFlag && (_e[_k] == _values[_k]);};if (innerFlag) flag = true;});return flag;}; log4js.configure({ appenders: { file: { type: 'file', filename: 'Log_'+getDateTime()+'_AC_DS_TS-01-00-04.json.log' } }, categories: { default: { appenders: ['file'], level: 'info' } }});const logger = log4js.getLogger('[AC_DS_TS-01-00-04.json]');const dataFile = path.join('.', 'data', "AC_DS_TS-01-00-04.json");logger.info('dataFile :: ' + dataFile);let dataPipe = {init: (_dataFile) => fs.writeFileSync(dataFile, '{}'),save: (_key, _data) => {data = JSON.parse(fs.readFileSync(dataFile).toString());data[_key] = _data;fs.writeFileSync(dataFile, JSON.stringify(data));},read: _dataFile => {let f = path.join('.', 'data', _dataFile);logger.info('Reading data from ' + f);return JSON.parse(fs.readFileSync(f).toString());}};dataPipe.init();var expect = require('chai').expect;var assert = require('chai').assert;var url1 = process.env.URL1 ? process.env.URL1 : 'https://qa.ds.appveen.com/api';describe('AppCenter API Tests', function () {var loginResponse='';var dataServiceData='';var secondDataService='';var recordTest='';var acLoginResponse='';var manageGroupResponse='';var sampleFunction = {"randomPin":(i) => {
		return i % 2 == 0 ? "123123" : "456456"
	}};it('Login - Valid as appAdmin in AC', function (done) {logger.info('Title: Login - Valid as appAdmin in AC');var _payload = {"username":"test_appadmin@appveen.com","password":"123123123"};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/login");logger.info("Request HEADERS :: " + JSON.stringify({}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/login","headers": {},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);loginResponse = res.body;dataPipe.save("loginResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["token"], 'res.body["token"]').to.be.equal(loginResponse.token);logger.info('Login - Valid as appAdmin in AC :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Login - Valid as appAdmin in AC :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('TS_01 Deploy testing3 data service [Timeout of 50s]', function (done) {logger.info('Title: TS_01 Deploy testing3 data service [Timeout of 50s]');this.timeout(50500);logger.info('Changing default timeout for this testcase to 50 seconds');logger.info("Request METHOD :: PUT");logger.info("Request URL :: " + url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-01.json').thirdDataService._id + "/deploy");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"}));request({"method": "PUT","url": url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-01.json').thirdDataService._id + "/deploy","headers": {"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(202);setTimeout(() => {logger.info('TS_01 Deploy testing3 data service [Timeout of 50s] :: PASS'); done();}, 50000);}catch (_err){logger.error(_err.message);logger.info('TS_01 Deploy testing3 data service [Timeout of 50s] :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('TS_01 Deploy testing2 data service [Timeout of 50s]', function (done) {logger.info('Title: TS_01 Deploy testing2 data service [Timeout of 50s]');this.timeout(50500);logger.info('Changing default timeout for this testcase to 50 seconds');logger.info("Request METHOD :: PUT");logger.info("Request URL :: " + url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-02.json').secondDataService._id + "/deploy");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"}));request({"method": "PUT","url": url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-02.json').secondDataService._id + "/deploy","headers": {"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(202);setTimeout(() => {logger.info('TS_01 Deploy testing2 data service [Timeout of 50s] :: PASS'); done();}, 50000);}catch (_err){logger.error(_err.message);logger.info('TS_01 Deploy testing2 data service [Timeout of 50s] :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('TS_01 Deploy testing1 data service [Timeout of 50s]', function (done) {logger.info('Title: TS_01 Deploy testing1 data service [Timeout of 50s]');this.timeout(50500);logger.info('Changing default timeout for this testcase to 50 seconds');logger.info("Request METHOD :: PUT");logger.info("Request URL :: " + url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-03.json').dataServiceData._id + "/deploy");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"}));request({"method": "PUT","url": url1 + "/a/sm/" + dataPipe.read('AC_DS_TS-01-00-03.json').dataServiceData._id + "/deploy","headers": {"Authorization":"JWT " + loginResponse.token + "","Content-Type":"application/json"},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(202);setTimeout(() => {logger.info('TS_01 Deploy testing1 data service [Timeout of 50s] :: PASS'); done();}, 50000);}catch (_err){logger.error(_err.message);logger.info('TS_01 Deploy testing1 data service [Timeout of 50s] :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('TS_01 Create Group DS Testing3 Manage', function (done) {logger.info('Title: TS_01 Create Group DS Testing3 Manage');var _payload = {"name":"DS Testing3 Manage","app":"TEST-API","users":["test_group_appcenter_manage@appveen.com"],"roles":[{"id":"P1827724851","entity":"" + dataPipe.read('AC_DS_TS-01-00-01.json').thirdDataService._id + "","app":"TEST-API","type":"appcenter"},{"id":"P1827724851","entity":"" + dataPipe.read('AC_DS_TS-01-00-02.json').secondDataService._id + "","app":"TEST-API","type":"appcenter"},{"id":"P1827724851","entity":"" + dataPipe.read('AC_DS_TS-01-00-03.json').dataServiceData._id + "","app":"TEST-API","type":"appcenter"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);manageGroupResponse = res.body;dataPipe.save("manageGroupResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Testing3 Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('TS_01 Create Group DS Testing3 Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('TS_01 Create Group DS Testing3 Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('TS_01 Create Group DS Testing3 View', function (done) {logger.info('Title: TS_01 Create Group DS Testing3 View');var _payload = {"name":"DS Testing3 View","app":"TEST-API","users":["test_group_appcenter_view@appveen.com"],"roles":[{"id":"P6788668262","entity":"" + dataPipe.read('AC_DS_TS-01-00-01.json').thirdDataService._id + "","app":"TEST-API","type":"appcenter"},{"id":"P6788668262","entity":"" + dataPipe.read('AC_DS_TS-01-00-02.json').secondDataService._id + "","app":"TEST-API","type":"appcenter"},{"id":"P6788668262","entity":"" + dataPipe.read('AC_DS_TS-01-00-03.json').dataServiceData._id + "","app":"TEST-API","type":"appcenter"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);manageGroupResponse = res.body;dataPipe.save("manageGroupResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('DS Testing3 View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('TS_01 Create Group DS Testing3 View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('TS_01 Create Group DS Testing3 View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});});