const log4js = require('log4js'); const request = require('request-promise'); const faker = require('faker');const fs = require('fs'); const path = require('path');if (!fs.existsSync('data')) fs.mkdirSync('data'); function getDateTime() {var sd = new Date();var syear = sd.getFullYear();var smonth = ('0' + (sd.getMonth() + 1)).slice(-2);var sdate = ('0' + sd.getDate()).slice(-2);var shours = ('0' + sd.getHours()).slice(-2);var sminutes = ('0' + sd.getMinutes()).slice(-2);var sseconds = ('0' + sd.getSeconds()).slice(-2);var startDate = syear + '-' + smonth + '-' + sdate;var startTime = shours + '-' + sminutes + '-' + sseconds;return startDate + '_' + startTime;}; function waitForInAPI(_option, _key, _value, _till){if(_till > (new Date())){return request(_option).then(_d => {if (JSON.parse(_d)[_key] == _value) return true;else {return new Promise(_resolve => {setTimeout(()=> _resolve(waitForInAPI(_option, _key, _value, _till)),500);});}}, _e => {return false});} else return false;}; function checkInList(_list, _values) {let flag = false;_list.forEach(_e => {let innerFlag = true;for (_k in _values) {innerFlag = innerFlag && (_e[_k] == _values[_k]);};if (innerFlag) flag = true;});return flag;}; log4js.configure({ appenders: { file: { type: 'file', filename: 'Log_'+getDateTime()+'_00-01-Groups-Bot-Create.json.log' } }, categories: { default: { appenders: ['file'], level: 'info' } }});const logger = log4js.getLogger('[00-01-Groups-Bot-Create.json]');const dataFile = path.join('.', 'data', "00-01-Groups-Bot-Create.json");logger.info('dataFile :: ' + dataFile);let dataPipe = {init: (_dataFile) => fs.writeFileSync(dataFile, '{}'),save: (_key, _data) => {data = JSON.parse(fs.readFileSync(dataFile).toString());data[_key] = _data;fs.writeFileSync(dataFile, JSON.stringify(data));},read: _dataFile => {let f = path.join('.', 'data', _dataFile);logger.info('Reading data from ' + f);return JSON.parse(fs.readFileSync(f).toString());}};dataPipe.init();var expect = require('chai').expect;var assert = require('chai').assert;var url1 = process.env.URL1 ? process.env.URL1 : 'https://bifrost.ds.appveen.com/api';describe('00::Groups for BOT users', function () {var loginResponse='';var bot_all_blocked='';var bot_info_view='';var bot_info_manage='';var bot_session_manage='';var bot_group_manage='';it('Login', function (done) {logger.info('Title: Login');var _payload = {"username":"test_appadmin@appveen.com","password":"123123123"};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/login");logger.info("Request HEADERS :: " + JSON.stringify({}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/login","headers": {},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);loginResponse = res.body;dataPipe.save("loginResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["token"], 'res.body["token"]').to.exist;logger.info('Login :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Login :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: Bot All Blocked', function (done) {logger.info('Title: Create Group: Bot All Blocked');var _payload = {"name":"Bot All Blocked","app":"TEST-API","users":["test_bot_all_blocked@appveen.com"]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);bot_all_blocked = res.body;dataPipe.save("bot_all_blocked",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('Bot All Blocked');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: Bot All Blocked :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: Bot All Blocked :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: Bot Info View', function (done) {logger.info('Title: Create Group: Bot Info View');var _payload = {"name":"Bot Info View","app":"TEST-API","users":["test_bot_info_view@appveen.com"],"roles":[{"id":"PVBB","app":"TEST-API","entity":"USER","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);bot_info_view = res.body;dataPipe.save("bot_info_view",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('Bot Info View');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: Bot Info View :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: Bot Info View :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: Bot Info Manage', function (done) {logger.info('Title: Create Group: Bot Info Manage');var _payload = {"name":"Bot Info Manage","app":"TEST-API","users":["test_bot_info_manage@appveen.com"],"roles":[{"id":"PMBBC","app":"TEST-API","entity":"USER","type":"author"},{"id":"PMBBU","app":"TEST-API","entity":"USER","type":"author"},{"id":"PMBBD","app":"TEST-API","entity":"USER","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);bot_info_manage = res.body;dataPipe.save("bot_info_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('Bot Info Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: Bot Info Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: Bot Info Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: Bot Session Manage', function (done) {logger.info('Title: Create Group: Bot Session Manage');var _payload = {"name":"Bot Session Manage","app":"TEST-API","users":["test_bot_session_manage@appveen.com"],"roles":[{"id":"PVBB","app":"TEST-API","entity":"USER","type":"author"},{"id":"PMBA","app":"TEST-API","entity":"USER","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);bot_session_manage = res.body;dataPipe.save("bot_session_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('Bot Session Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: Bot Session Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: Bot Session Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Create Group: Bot Group Manage', function (done) {logger.info('Title: Create Group: Bot Group Manage');var _payload = {"name":"Bot Group Manage","app":"TEST-API","users":["test_bot_group_manage@appveen.com"],"roles":[{"id":"PVBB","app":"TEST-API","entity":"USER","type":"author"},{"id":"PMBG","app":"TEST-API","entity":"USER","type":"author"}]};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/group");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/group","headers": {"Authorization":"JWT " + loginResponse.token + ""},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);bot_group_manage = res.body;dataPipe.save("bot_group_manage",res.body);expect(res.body).to.be.not.null;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('Bot Group Manage');expect(res.body["app"], 'res.body["app"]').to.be.a('string');expect(res.body["app"], 'res.body["app"]').to.be.equal('TEST-API');logger.info('Create Group: Bot Group Manage :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Create Group: Bot Group Manage :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});});