const log4js = require('log4js'); const request = require('request-promise'); const faker = require('faker');const fs = require('fs'); const path = require('path');if (!fs.existsSync('data')) fs.mkdirSync('data'); function getDateTime() {var sd = new Date();var syear = sd.getFullYear();var smonth = ('0' + (sd.getMonth() + 1)).slice(-2);var sdate = ('0' + sd.getDate()).slice(-2);var shours = ('0' + sd.getHours()).slice(-2);var sminutes = ('0' + sd.getMinutes()).slice(-2);var sseconds = ('0' + sd.getSeconds()).slice(-2);var startDate = syear + '-' + smonth + '-' + sdate;var startTime = shours + '-' + sminutes + '-' + sseconds;return startDate + '_' + startTime;}; function waitForInAPI(_option, _key, _value, _till){if(_till > (new Date())){return request(_option).then(_d => {if (JSON.parse(_d)[_key] == _value) return true;else {return new Promise(_resolve => {setTimeout(()=> _resolve(waitForInAPI(_option, _key, _value, _till)),500);});}}, _e => {return false});} else return false;}; function checkInList(_list, _values) {let flag = false;_list.forEach(_e => {let innerFlag = true;for (_k in _values) {innerFlag = innerFlag && (_e[_k] == _values[_k]);};if (innerFlag) flag = true;});return flag;}; log4js.configure({ appenders: { file: { type: 'file', filename: 'Log_'+getDateTime()+'_00-00-LoginLogOff.json.log' } }, categories: { default: { appenders: ['file'], level: 'info' } }});const logger = log4js.getLogger('[00-00-LoginLogOff.json]');const dataFile = path.join('.', 'data', "00-00-LoginLogOff.json");logger.info('dataFile :: ' + dataFile);let dataPipe = {init: (_dataFile) => fs.writeFileSync(dataFile, '{}'),save: (_key, _data) => {data = JSON.parse(fs.readFileSync(dataFile).toString());data[_key] = _data;fs.writeFileSync(dataFile, JSON.stringify(data));},read: _dataFile => {let f = path.join('.', 'data', _dataFile);logger.info('Reading data from ' + f);return JSON.parse(fs.readFileSync(f).toString());}};dataPipe.init();var expect = require('chai').expect;var assert = require('chai').assert;var url1 = process.env.URL1 ? process.env.URL1 : 'https://bifrost.ds.appveen.com/api';describe('00::Login-Logoff test for Author and App Center', function () {var loginResponse='';it('Check API: Should Fail', function (done) {logger.info('Title: Check API: Should Fail');logger.info("Request METHOD :: GET");logger.info("Request URL :: " + url1 + "/a/rbac/check");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT asdasdasd"}));request({"method": "GET","url": url1 + "/a/rbac/check","headers": {"Authorization":"JWT asdasdasd"},"json": true,"resolveWithFullResponse": true}).then(res => {}, res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.error));try{expect(res.statusCode, JSON.stringify(res.error)).to.equal(401);logger.info('Check API: Should Fail :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Check API: Should Fail :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Auth type check', function (done) {logger.info('Title: Auth type check');logger.info("Request METHOD :: GET");logger.info("Request URL :: " + url1 + "/a/rbac/authType/admin");logger.info("Request HEADERS :: " + JSON.stringify({}));request({"method": "GET","url": url1 + "/a/rbac/authType/admin","headers": {},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);expect(res.body).to.be.not.null;expect(res.body["authType"], 'res.body["authType"]').to.be.a('string');expect(res.body["authType"], 'res.body["authType"]').to.be.equal('local');expect(res.body["bot"], 'res.body["bot"]').to.all.satisfy(bool => typeof bool === 'boolean');expect(res.body["bot"], 'res.body["bot"]').to.be.equal(false);expect(res.body["sessionActive"], 'res.body["sessionActive"]').to.exist;expect(res.body["name"], 'res.body["name"]').to.be.a('string');expect(res.body["name"], 'res.body["name"]').to.be.equal('John Doe');expect(res.body["rbacUserToSingleSession"], 'res.body["rbacUserToSingleSession"]').to.exist;expect(res.body["rbacUserReloginAction"], 'res.body["rbacUserReloginAction"]').to.exist;logger.info('Auth type check :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Auth type check :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Login', function (done) {logger.info('Title: Login');var _payload = {"username":"admin","password":"u?5k167v13w5"};logger.info("Request METHOD :: POST");logger.info("Request URL :: " + url1 + "/a/rbac/login");logger.info("Request HEADERS :: " + JSON.stringify({}));logger.info("Request BODY :: " + JSON.stringify(_payload));request({"method": "POST","url": url1 + "/a/rbac/login","headers": {},"body": _payload,"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);loginResponse = res.body;dataPipe.save("loginResponse",res.body);expect(res.body).to.be.not.null;expect(res.body["basicDetails"]["phone"], 'res.body["basicDetails"]["phone"]').to.be.a('string');expect(res.body["basicDetails"]["phone"], 'res.body["basicDetails"]["phone"]').to.be.equal('1234567890');expect(res.body["isSuperAdmin"], 'res.body["isSuperAdmin"]').to.all.satisfy(bool => typeof bool === 'boolean');expect(res.body["isSuperAdmin"], 'res.body["isSuperAdmin"]').to.be.equal(true);expect(res.body["enableSessionRefresh"], 'res.body["enableSessionRefresh"]').to.all.satisfy(bool => typeof bool === 'boolean');expect(res.body["enableSessionRefresh"], 'res.body["enableSessionRefresh"]').to.be.equal(true);expect(res.body["bot"], 'res.body["bot"]').to.all.satisfy(bool => typeof bool === 'boolean');expect(res.body["bot"], 'res.body["bot"]').to.be.equal(false);expect(res.body["_id"], 'res.body["_id"]').to.be.a('string');expect(res.body["_id"], 'res.body["_id"]').to.be.equal('admin');expect(res.body["username"], 'res.body["username"]').to.be.a('string');expect(res.body["username"], 'res.body["username"]').to.be.equal('admin');expect(res.body["auth"]["authType"], 'res.body["auth"]["authType"]').to.be.a('string');expect(res.body["auth"]["authType"], 'res.body["auth"]["authType"]').to.be.equal('local');expect(res.body["apps"]).to.be.an('array');expect(res.body["apps"][0], 'res.body["apps"][0]').to.exist;expect(res.body["token"], 'res.body["token"]').to.exist;expect(res.body["rToken"], 'res.body["rToken"]').to.exist;expect(res.body["expiresIn"], 'res.body["expiresIn"]').to.exist;expect(res.body["rbacUserTokenDuration"], 'res.body["rbacUserTokenDuration"]').to.exist;expect(res.body["rbacUserTokenRefresh"], 'res.body["rbacUserTokenRefresh"]').to.exist;expect(res.body["rbacUserToSingleSession"], 'res.body["rbacUserToSingleSession"]').to.exist;expect(res.body["rbacUserCloseWindowToLogout"], 'res.body["rbacUserCloseWindowToLogout"]').to.exist;expect(res.body["rbacBotTokenDuration"], 'res.body["rbacBotTokenDuration"]').to.exist;expect(res.body["rbacHbInterval"], 'res.body["rbacHbInterval"]').to.exist;expect(res.body["uuid"], 'res.body["uuid"]').to.exist;logger.info('Login :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Login :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Check API: Should Pass', function (done) {logger.info('Title: Check API: Should Pass');logger.info("Request METHOD :: GET");logger.info("Request URL :: " + url1 + "/a/rbac/check");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));request({"method": "GET","url": url1 + "/a/rbac/check","headers": {"Authorization":"JWT " + loginResponse.token + ""},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);logger.info('Check API: Should Pass :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Check API: Should Pass :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Check login : PASS', function (done) {logger.info('Title: Check login : PASS');logger.info("Request METHOD :: GET");logger.info("Request URL :: " + url1 + "/a/sm/service?page=1&count=-1&filter=%7B%22domain%22:%22Adam%22%7D");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));request({"method": "GET","url": url1 + "/a/sm/service?page=1&count=-1&filter=%7B%22domain%22:%22Adam%22%7D","headers": {"Authorization":"JWT " + loginResponse.token + ""},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);logger.info('Check login : PASS :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Check login : PASS :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Check login : Should Fail [Continue on error]', function (done) {logger.info('Title: Check login : Should Fail [Continue on error]');logger.info("Request METHOD :: GET");logger.info("Request URL :: " + url1 + "/a/sm/service?page=1&count=-1&filter=%7B%22domain%22:%22Adam%22%7D");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + " 123123"}));request({"method": "GET","url": url1 + "/a/sm/service?page=1&count=-1&filter=%7B%22domain%22:%22Adam%22%7D","headers": {"Authorization":"JWT " + loginResponse.token + " 123123"},"json": true,"resolveWithFullResponse": true}).then(res => {}, res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.error));try{expect(res.statusCode, JSON.stringify(res.error)).to.equal(401);logger.info('Check login : Should Fail [Continue on error] :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Check login : Should Fail [Continue on error] :: FAIL');done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);done();});});it('Logoff', function (done) {logger.info('Title: Logoff');logger.info("Request METHOD :: DELETE");logger.info("Request URL :: " + url1 + "/a/rbac/logout");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + ""}));request({"method": "DELETE","url": url1 + "/a/rbac/logout","headers": {"Authorization":"JWT " + loginResponse.token + ""},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);logger.info('Logoff :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Logoff :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});it('Logoff with incorrect token', function (done) {logger.info('Title: Logoff with incorrect token');logger.info("Request METHOD :: DELETE");logger.info("Request URL :: " + url1 + "/a/rbac/logout");logger.info("Request HEADERS :: " + JSON.stringify({"Authorization":"JWT " + loginResponse.token + " 123123"}));request({"method": "DELETE","url": url1 + "/a/rbac/logout","headers": {"Authorization":"JWT " + loginResponse.token + " 123123"},"json": true,"resolveWithFullResponse": true}).then(res => {logger.info('Response STATUS :: ' + res.statusCode);logger.info('Response HEADER :: ' + JSON.stringify(res.headers));logger.info('Response BODY :: ' + JSON.stringify(res.body));try{expect(res.statusCode, JSON.stringify(res.body)).to.equal(200);logger.info('Logoff with incorrect token :: PASS'); done();}catch (_err){logger.error(_err.message);logger.info('Logoff with incorrect token :: FAIL');assert.fail(_err.actual, _err.expected, _err.message);done();};}).catch(_err => {logger.info('ERROR Response STATUS :: ' + _err.statusCode);logger.info('ERROR Response HEADERS :: ' + JSON.stringify(_err.headers));logger.info('ERROR Response BODY :: ' + JSON.stringify(_err.body));logger.error(_err.message);assert.fail(0,1, _err.message);done();});});});